<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    <!-- Здесь должны находиться объявления компонентов -->
    <bean id="duke"
          class="com.springinaction.springidol.performers.Juggler">
        <constructor-arg value="15"/>
    </bean>

    <bean id="sonnet29"
          class="com.springinaction.springidol.poems.Sonnet29"/>

    <bean id="poeticDuke"
          class="com.springinaction.springidol.performers.PoeticJuggler">
        <constructor-arg value="15"/>
        <constructor-arg ref="sonnet29"/>
    </bean>

    <!--factory-method позволяет определить статический метод,
    который должен вызываться для создания экземпляра класса вместо конструктора.-->
    <bean id="theStage"
          class="com.springinaction.springidol.services.Stage"
          factory-method="getInstance"/>

    <!--Фреймворк Spring создает новый экземпляр при каждом обращении, в объявлении компонента-->
    <bean id="ticket"
          class="com.springinaction.springidol.services.Ticket" scope="prototype"/>

    <!--После создания экземпляра компонента auditorium будет вызван метод turnOnLights().
    Перед удалением компонента из контейнера будет вызван метод turnOffLights().-->
    <bean id="auditorium"
          class="com.springinaction.springidol.services.Auditorium"
          init-method="turnOnLights"
          destroy-method="turnOffLights"/>

    <!--Элемент <property> предписывает фреймворку Spring вызвать
    метод setSong() для записи значения "Jingle Bells" в свойство song.-->
    <bean id="kenny"
          class="com.springinaction.springidol.performers.Instrumentalist">
        <property name="song" value="Jingle Bells"/>
        <property name="age" value="37"/>
    </bean>

    <bean id="saxophone"
          class="com.springinaction.springidol.instruments.Saxophone"/>

    <bean id="piano"
          class="com.springinaction.springidol.instruments.Piano"/>

    <bean id="guitar"
          class="com.springinaction.springidol.instruments.Guitar"/>

    <bean id="cymbal"
          class="com.springinaction.springidol.instruments.Cymbal"/>

    <bean id="harmonica"
          class="com.springinaction.springidol.instruments.Harmonica"/>

    <bean id="kenny2"
          class="com.springinaction.springidol.performers.Instrumentalist">
        <property name="song" value="Jingle Bells"/>
        <property name="instrument" ref="saxophone"/>
    </bean>

    <!--В данном случае будет создан объект Saxophone
    и внедрен в свойство instrument компонента kenny3-->
    <bean id="kenny3"
          class="com.springinaction.springidol.performers.Instrumentalist">
        <property name="song" value="Jingle Bells"/>
        <property name="instrument">
            <bean class="com.springinaction.springidol.instruments.Saxophone"/>
        </property>
    </bean>

    <!--Внутренние компоненты можно также внедрять через аргументы конструктора.
    Здесь экземпляр класса Sonnet29 будет создан как внутренний компонент
    и передан в виде аргумента конструктору класса PoeticJuggler.-->
    <bean id="duke2"
          class="com.springinaction.springidol.performers.PoeticJuggler">
        <constructor-arg value="15"/>
        <constructor-arg>
            <bean class="com.springinaction.springidol.poems.Sonnet29"/>
        </constructor-arg>
    </bean>

    <!--Атрибут p:song со значением "Jingle Bells" внедряет это значение в свойство song.
    Однако атрибут p:instrument-ref со значением "saxophone" в действительности
    внедряет в свойство instrument ссылку на компонент с идентификатором saxophone.
    Окончание -ref подсказывает фреймворку Spring, что вместо буквального значения он
    должен внедрить ссылку на соответствующий компонент.-->
    <bean id="kenny4" class="com.springinaction.springidol.performers.Instrumentalist"
          p:song="Jingle Bells"
          p:instrument-ref="saxophone"/>

    <!--Атрибут key используется для определения строкового ключа,
    а атрибут value-ref – для определения ссылочного значения.
    Элемент <map> – это единственный способ внедрения пар ключ/значение
    в свойства компонента, когда один из объектов не является строкой.-->
    <bean id="hank"
          class="com.springinaction.springidol.performers.OneManBand">
        <property name="instruments">
            <map>
                <entry key="GUITAR" value-ref="guitar"/>
                <entry key="CYMBAL" value-ref="cymbal"/>
                <entry key="HARMONICA" value-ref="harmonica"/>
            </map>
        </property>
    </bean>

    <!--<property> – элемент для внедрения значения или ссылки на компонент в «обычное» свойство компонента.
    <props> – элемент для определения коллекций типа java.util.Properties.
    <prop> – элемент для определения члена коллекции <props>.-->
    <bean id="hank-prop"
          class="com.springinaction.springidol.performers.OneManBandProp">
        <property name="someNonNullProperty"><null/></property>
        <property name="instruments">
            <props>
                <prop key="GUITAR">STRUM STRUM STRUM</prop>
                <prop key="CYMBAL">CRASH CRASH CRASH</prop>
                <prop key="HARMONICA">HUM HUM HUM</prop>
            </props>
        </property>
    </bean>

    <!--Конструкция #{} на языке SpEL.-->
    <!--Первая часть (перед точкой) ссылается на компонент kenny по его идентификатору.-->
    <!--Вторая часть ссылается на свойство song компонента kenny.-->
    <!--Подобное внедрение равносильно carl.setSong(kenny.getSong());-->
    <bean id="carl"
          class="com.springinaction.springidol.performers.Instrumentalist">
        <property name="song" value="#{kenny.song}"/>
    </bean>

    <!--можно вызывать методы компонентов.-->
    <!--<bean id="carl-selector"
          class="com.springinaction.springidol.performers.Instrumentalist">
        <property name="song" value="#{songSelector.selectSong()}"/>
    </bean>-->
    <!--Чтобы избежать исключения NullPointerException, следует задействовать защищенный оператор
    доступа к свойству (?.): <property name="song" value="#{songSelector.selectSong()?.toUpperCase()}"/>-->
    <!--оператор (?.) сначала проверяет, не является ли пустым элемент слева,
    и только потом выполняет обращение к элементу справа.-->

</beans>
